<?php

namespace {{testNamespace}};

use Illuminate\Foundation\Testing\RefreshDatabase;
use {{modelNamespace}}\{{modelName}};
use Tests\TestCase;

class {{modelName}}ControllerTest extends TestCase
{
    use RefreshDatabase;

  public function test_can_create_{{modelNameLowerCase}}()
      {
          ${{modelNameLowerCase}}Data = [
            {{testData}}
          ];

          $response = $this->post('/{{modelRoute}}', ${{modelNameLowerCase}}Data);

          $response->assertStatus(302);

          $this->assertDatabaseHas('{{modelRoute}}', ${{modelNameLowerCase}}Data);

          // Check if the create route exists
          $this->assertRouteExists('{{modelRoute}}.create');
      }

      public function test_can_read_{{modelNameLowerCase}}()
      {
          ${{modelNameLowerCase}} = {{modelName}}::factory()->create();

          $response = $this->get("/{{modelRoute}}/{${{modelNameLowerCase}}->id}");

          $response->assertStatus(200);

          // Check if the show route exists
          $this->assertRouteExists('{{modelRoute}}.show', ${{modelNameLowerCase}}->id);

          // Check if the {{modelNameLowerCase}} show view is being used
          $response->assertViewIs('{{modelRoute}}.show');
      }

      public function test_can_update_{{modelNameLowerCase}}()
      {
          ${{modelNameLowerCase}} = {{modelName}}::factory()->create();
          $newData = [
             {{testData}}
          ];

          $response = $this->put("/{{modelRoute}}/{${{modelNameLowerCase}}->id}", $newData);

          $response->assertStatus(302);

          $this->assertDatabaseHas('{{modelRoute}}', $newData);


          $this->assertRouteExists('{{modelRoute}}.edit', ${{modelNameLowerCase}}->id);

          $response = $this->get("/tags/{${{modelNameLowerCase}}->id}/edit", $newData);

          $response->assertViewIs('{{modelRoute}}.edit');
      }

      public function test_can_delete_{{modelNameLowerCase}}()
      {
          ${{modelNameLowerCase}} = {{modelName}}::factory()->create();

          $response = $this->delete("/{{modelRoute}}/{${{modelNameLowerCase}}->id}");

          $response->assertStatus(302);

          $this->assertDatabaseMissing('{{modelRoute}}', ['id' => ${{modelNameLowerCase}}->id]);

          // Check if the destroy route exists
          $this->assertRouteExists('{{modelRoute}}.destroy', ${{modelNameLowerCase}}->id);
      }

    public function test_can_access_index_page()
        {
            ${{modelRoute}} = {{modelName}}::factory()->count(5)->create();

            $response = $this->get('/{{modelRoute}}');

            $response->assertStatus(200);

            foreach (${{modelRoute}} as ${{modelNameLowerCase}}) {
                $response->assertSee(${{modelNameLowerCase}}->id);
                // Add more assertions for other visible {{modelNameLowerCase}} attributes as needed.
            }

            // Check if the index route exists
            $this->assertRouteExists('{{modelRoute}}.index');

            // Check if the index view is being used
            $response->assertViewIs('{{modelRoute}}.index');
        }

        public function test_can_access_create_page()
        {
            // Make a GET request to the create page
            $response = $this->get(route('{{modelRoute}}.create'));

            // Assert that the create page loads successfully (HTTP status 200)
            $response->assertStatus(200);

            // Optionally, you can also assert that the create view is being used
            $response->assertViewIs('{{modelRoute}}.create');
        }

        public function test_can_access_edit_page()
        {
     ${{modelNameLowerCase}} = {{modelName}}::factory()->create();

            $response = $this->get(route('{{modelRoute}}.edit', ['{{modelNameLowerCase}}' =>    ${{modelNameLowerCase}}->id ]));

            // Assert that the edit page loads successfully (HTTP status 200)
            $response->assertStatus(200);

            // Optionally, you can also assert that the edit view is being used
            $response->assertViewIs('{{modelRoute}}.edit');
        }

      protected function assertRouteExists($routeName)
      {
          $this->assertTrue(app('router')->has($routeName), "Route {$routeName} does not exist.");
      }
}
