<?php

namespace {{controllerNamespace}};

use {{datatableNamespace}}\{{modelName}}DataTable;
use {{requestNamespace}}\{{modelName}}Request;
use {{interfaceNamespace}}\{{modelName}}RepositoryInterface;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\JsonResponse;
use Illuminate\View\View;

class {{modelName}}Controller extends Controller
{
   protected ${{modelNamePluralLowerCase}}Repository;

   public function __construct({{modelName}}RepositoryInterface ${{modelNamePluralLowerCase}}Repository)
   {
        $this->{{modelNamePluralLowerCase}}Repository = ${{modelNamePluralLowerCase}}Repository;
   }

    public function index({{modelName}}DataTable ${{modelNameLowerCase}}DataTable): View|JsonResponse
    {
     return ${{modelNameLowerCase}}DataTable->render('{{modelView}}.index');
    }

    public function create(): View
    {
        ${{modelNameLowerCase}} =  $this->{{modelNamePluralLowerCase}}Repository->newObject();
        return view('{{modelView}}.create', compact('{{modelNameLowerCase}}'));
    }

    public function store({{modelName}}Request $request): RedirectResponse
    {
        $this->{{modelNamePluralLowerCase}}Repository->store($request->validated());
        return redirect()->route('{{modelRoute}}.index')->with('success', 'Operation successfully');
    }

    public function show($id): View
    {
        ${{modelNameLowerCase}} =  $this->{{modelNamePluralLowerCase}}Repository->findById($id);
        return view('{{modelView}}.show', compact('{{modelNameLowerCase}}'));
    }

    public function edit($id): View
    {
        ${{modelNameLowerCase}} =  $this->{{modelNamePluralLowerCase}}Repository->findById($id);
        return view('{{modelView}}.edit', compact('{{modelNameLowerCase}}'));
    }

    public function update({{modelName}}Request $request, $id): RedirectResponse
    {
        $this->{{modelNamePluralLowerCase}}Repository->update($id,$request->validated());
        return redirect()->route('{{modelRoute}}.index')->with('success', 'Operation successfully');
    }

    public function destroy($id): RedirectResponse
    {
        $this->{{modelNamePluralLowerCase}}Repository->deleteById($id);
        return redirect()->route('{{modelRoute}}.index')->with('success', 'Operation successfully');
    }
}
